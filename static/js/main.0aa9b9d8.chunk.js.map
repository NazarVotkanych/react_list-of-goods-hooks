{"version":3,"sources":["types/SortType.ts","Components/GoodCard/GoodCard.tsx","Components/GoodList/GoodList.tsx","Components/GoodsFromServer.ts","App.tsx","index.tsx"],"names":["SortType","GoodCard","good","GoodList","goods","map","goodsFromServer","App","useState","Default","sortField","setSortField","isReversed","setIsReversed","hasSortFieldOrIsReversed","visibleGoods","preparedGoods","sortFunction","Name","good1","good2","localeCompare","Length","length","Error","sort","reverse","getPreparedGoods","className","onClick","type","cn","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,0ECICC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,oBAAI,UAAQ,OAAZ,SACGA,KCAQC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,6BACGA,EAAMC,KAAI,SAAAH,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,SCTpBI,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SHVUN,K,YAAAA,E,gBAAAA,E,YAAAA,M,KIiDL,IAAMO,EAAgB,WAC3B,MAAkCC,mBAASR,EAASS,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAA4BJ,GAAaE,EACzCG,EA7CR,SACEX,EACAM,EACAE,GAEA,IAAMI,EAAuB,YAAOZ,GAEpC,GAAIM,EAAW,CACb,IAAIO,EAEJ,OAAQP,GACN,KAAKV,EAASkB,KACZD,EAAe,SACbE,EACAC,GAFa,OAGVD,EAAME,cAAcD,IACzB,MAEF,KAAKpB,EAASsB,OACZL,EAAe,SACbE,EACAC,GAFa,OAGVD,EAAMI,OAASH,EAAMG,QAC1B,MAEF,QACE,MAAM,IAAIC,MAAJ,8BAAiCd,IAGvCO,GACFD,EAAcS,KAAKR,GAQvB,OAJIL,GACFI,EAAcU,UAGTV,EAOcW,CACnBrB,EACAI,EACAE,GAQF,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMlB,EAAaX,EAASkB,OACrCY,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYrB,IAAcV,EAASkB,OAJvC,iCAUA,wBACEW,QAAS,kBAAMlB,EAAaX,EAASsB,SACrCQ,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYrB,IAAcV,EAASsB,SAJvC,4BAUA,wBACEO,QAAS,kBAAMhB,GAAeD,IAC9BkB,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,YAAanB,IAJjB,qBAUCE,GACC,wBACEe,QAxCV,WACElB,EAAaX,EAASS,SACtBI,GAAc,IAuCNiB,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,cAAC,EAAD,CAAUxB,MAAOW,QCzGvBiB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0aa9b9d8.chunk.js","sourcesContent":["export enum SortType {\n  Name = 'name',\n  Length = 'length',\n  Default = '',\n}\n","type Props = {\n  good: string;\n};\n\nexport const GoodCard: React.FC<Props> = ({ good }) => (\n  <li data-cy=\"Good\">\n    {good}\n  </li>\n);\n","import { GoodCard } from '../GoodCard/GoodCard';\n\ntype Props = {\n  goods: string[]\n};\n\nexport const GoodList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <GoodCard good={good} key={good} />\n    ))}\n  </ul>\n);\n","export const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { GoodList } from './Components/GoodList/GoodList';\nimport { goodsFromServer } from './Components/GoodsFromServer';\nimport { SortType } from './types/SortType';\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  isReversed: boolean,\n) {\n  const preparedGoods: string[] = [...goods];\n\n  if (sortField) {\n    let sortFunction;\n\n    switch (sortField) {\n      case SortType.Name:\n        sortFunction = (\n          good1: string,\n          good2: string,\n        ) => good1.localeCompare(good2);\n        break;\n\n      case SortType.Length:\n        sortFunction = (\n          good1: string,\n          good2: string,\n        ) => good1.length - good2.length;\n        break;\n\n      default:\n        throw new Error(`Unknown sort field: ${sortField}`);\n    }\n\n    if (sortFunction) {\n      preparedGoods.sort(sortFunction);\n    }\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.Default);\n  const [isReversed, setIsReversed] = useState(false);\n  const hasSortFieldOrIsReversed = (sortField || isReversed);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    isReversed,\n  );\n\n  function reset(): void {\n    setSortField(SortType.Default);\n    setIsReversed(false);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.Name)}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortField !== SortType.Name,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.Length)}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortField !== SortType.Length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsReversed(!isReversed)}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {hasSortFieldOrIsReversed && (\n          <button\n            onClick={reset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodList goods={visibleGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}